run:
  timeout: 10m

issues:
  exclude-rules:
    - path: _test.go
      linters:
        - gosec
        - revive
        - maintidx
        - funlen
        - testpackage
        - ireturn
        - wrapcheck
        - tparallel
    - path: _suite.go
      linters:
        - funlen
        - testpackage
        - ireturn
linters-settings:
  rowserrcheck:
    # database/sql is always checked
    # Default: []
    packages:
      - github.com/jmoiron/sqlx

  exhaustruct:
    include:
      - testcontainers.GenericContainerRequest

  gci:
    # Section configuration to compare against.
    # Section names are case-insensitive and may contain parameters in ().
    # The default order of sections is `standard > default > custom > blank > dot > alias`,
    # If `custom-order` is `true`, it follows the order of `sections` option.
    # Default: ["standard", "default"]
    sections:
      - standard # Standard section: captures all standard packages.
      - default # Default section: contains all imports that could not be matched to another section type.
      - blank # Blank section: contains all blank imports. This section is not present unless explicitly enabled.
      - dot # Dot section: contains all dot imports. This section is not present unless explicitly enabled.
      - alias # Alias section: contains all alias imports. This section is not present unless explicitly enabled.
      - localmodule # Local module section: contains all local packages. This section is not present unless explicitly enabled.
    # Skip generated files.
    skip-generated: true
    # Enable custom order of sections.
    # If `true`, make the section order the same as the order of `sections`.
    # Default: false
    custom-order: true
  funlen:
    # Checks the number of lines in a function.
    # If lower than 0, disable the check.
    # Default: 60
    lines: 130
    # Checks the number of statements in a function.
    # If lower than 0, disable the check.
    # Default: 40
    statements: 40
    # Ignore comments when counting lines.
    # Default false
    ignore-comments: true
  varnamelen:
    # The longest distance, in source lines, that is being considered a "small scope".
    # Variables used in at most this many lines will be ignored.
    # Default: 5
    max-distance: 6
    # The minimum length of a variable's name that is considered "long".
    # Variable names that are at least this long will be ignored.
    # Default: 3
    min-name-length: 2
    # Check method receivers.
    # Default: false
    check-receiver: false
    # Check named return values.
    # Default: false
    check-return: true
    # Check type parameters.
    # Default: false
    check-type-param: false
    # Ignore "ok" variables that hold the bool return value of a type assertion.
    # Default: false
    ignore-type-assert-ok: true
    # Ignore "ok" variables that hold the bool return value of a map index.
    # Default: false
    ignore-map-index-ok: true
    # Ignore "ok" variables that hold the bool return value of a channel receive.
    # Default: false
    ignore-chan-recv-ok: true
    # Optional list of variable declarations that should be ignored completely.
    # Entries must be in one of the following forms (see below for examples):
    # - for variables, parameters, named return values, method receivers, or type parameters:
    #   <name> <type>  (<type> can also be a pointer/slice/map/chan/...)
    # - for constants: const <name>
    #
    # Default: []
    ignore-decls:
      - i int
      - r *http.Request
      - w http.ResponseWriter
      - r *routegroup.Bundle

  ireturn:
    # ireturn does not allow using `allow` and `reject` settings at the same time.
    # Both settings are lists of the keywords and regular expressions matched to interface or package names.
    # keywords:
    # - `empty` for `interface{}`
    # - `error` for errors
    # - `stdlib` for standard library
    # - `anon` for anonymous interfaces
    # - `generic` for generic interfaces added in go 1.18
    # By default, it allows using errors, empty interfaces, anonymous interfaces,
    # and interfaces provided by the standard library.
    allow:
      - anon
      - error
      - empty
      - stdlib
  wsl:
    # See https://github.com/bombsimon/wsl/blob/master/doc/configuration.md for documentation of available settings.
    # These are the defaults for `golangci-lint`.

    # Do strict checking when assigning from append (x = append(x, y)). If
    # this is set to true - the append call must append either a variable
    # assigned, called or used on the line above.
    strict-append: true
    # Allows assignments to be cuddled with variables used in calls on
    # line above and calls to be cuddled with assignments of variables
    # used in call on line above.
    allow-assign-and-call: false
    # Allows assignments to be cuddled with anything.
    allow-assign-and-anything: true
    # Allows cuddling to assignments even if they span over multiple lines.
    allow-multiline-assign: true
    # If the number of lines in a case block is equal to or lager than this
    # number, the case *must* end white a newline.
    force-case-trailing-whitespace: 0
    # Allow blocks to end with comments.
    allow-trailing-comment: false
    # Allow multiple comments in the beginning of a block separated with newline.
    allow-separated-leading-comment: false
    # Allow multiple var/declaration statements to be cuddled.
    allow-cuddle-declarations: false
    # A list of call idents that everything can be cuddled with.
    # Defaults to calls looking like locks.
    allow-cuddle-with-calls: ["Lock", "RLock"]
    # AllowCuddleWithRHS is a list of right hand side variables that is allowed
    # to be cuddled with anything. Defaults to assignments or calls looking
    # like unlocks.
    allow-cuddle-with-rhs: ["Unlock", "RUnlock"]
    # Causes an error when an If statement that checks an error variable doesn't
    # cuddle with the assignment of that variable.
    force-err-cuddling: false
    # When force-err-cuddling is enabled this is a list of names
    # used for error variables to check for in the conditional.
    error-variable-names: ["err"]
    # Causes an error if a short declaration (:=) cuddles with anything other than
    # another short declaration.
    # This logic overrides force-err-cuddling among others.
    force-short-decl-cuddling: false
  cyclop:
    # The maximal code complexity to report.
    # Default: 10
    max-complexity: 11
    # The maximal average package complexity.
    # If it's higher than 0.0 (float) the check is enabled
    # Default: 0.0
    package-average: 20
    # Should ignore tests.
    # Default: false
    skip-tests: true
  lll:
    # Max line length, lines longer will be reported.
    # '\t' is counted as 1 character by default, and can be changed with the tab-width option.
    # Default: 120.
    line-length: 120
    # Tab width in spaces.
    # Default: 1
    tab-width: 1
  whitespace:
    # Enforces newlines (or comments) after every multi-line if statement.
    # Default: false
    multi-if: true
    # Enforces newlines (or comments) after every multi-line function signature.
    # Default: false
    multi-func: false
  mnd:
    ignored-files:
      - './internal/common'
linters:
  enable-all: true
  disable:
    # deprecated linters
    - err113
    - tagliatelle
    - godox
    - nolintlint
    - gochecknoglobals
    - depguard
    - interfacebloat
    - exportloopref

# output configuration options
output:
  # Print lines of code with issue.
  print-issued-lines: true

  # Print linter name in the end of issue text.
  print-linter-name: true

  # Make issues output unique by line.
  uniq-by-line: true